# Run secret-dependent integration tests only after /ok-to-test approval
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test-command]

name: Integration tests

jobs:
  # Branch-based pull request
  integration-trusted-linux:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:

    - name: Branch based PR checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Config
      run: |
        conda create -q -n conda-env python=${{ matrix.python-version }}

        # for the tests that depend on git repos
        git config --global user.email "someone@example.com"
        git config --global user.name "Someone"

    - name: Install dependencies
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        # for some reason, conda does not resolve the env correctly and
        # installs and old version of pygraphviz (1.3) which breaks in
        # Python 3.7
        conda install -y "pygraphviz>=1.6" -c conda-forge

        # Test vanilla installation, make sure core modules are importable
        pip install .
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'
        python -c 'import ploomber.io'

        # install dev requirements
        pip install .[dev]

        # install IR kernel
        echo "install.packages('IRkernel', repos='http://cran.us.r-project.org'); IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
        PLOOMBER_STATS_ENABLED: false
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # doc tests
        export PY_IGNORE_IMPORTMISMATCH=1
        pytest src/ploomber --doctest-modules --ignore src/ploomber/resources
        unset PY_IGNORE_IMPORTMISMATCH

        # unit tests
        pytest tests/cli/test_cloud_execution.py --cov=ploomber 
        coveralls

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  integration-fork-linux:
    runs-on: ubuntu-latest
    if: 
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)

    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:

    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Config
      run: |
        conda create -q -n conda-env python=${{ matrix.python-version }}

        # for the tests that depend on git repos
        git config --global user.email "someone@example.com"
        git config --global user.name "Someone"

    - name: Install dependencies
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        # for some reason, conda does not resolve the env correctly and
        # installs and old version of pygraphviz (1.3) which breaks in
        # Python 3.7
        conda install -y "pygraphviz>=1.6" -c conda-forge

        # Test vanilla installation, make sure core modules are importable
        pip install .
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'
        python -c 'import ploomber.io'

        # install dev requirements
        pip install .[dev]

        # install IR kernel
        echo "install.packages('IRkernel', repos='http://cran.us.r-project.org'); IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
        PLOOMBER_STATS_ENABLED: false
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # doc tests
        export PY_IGNORE_IMPORTMISMATCH=1
        pytest src/ploomber --doctest-modules --ignore src/ploomber/resources
        unset PY_IGNORE_IMPORTMISMATCH

        # unit tests
        pytest tests/cli/test_cloud_execution.py --cov=ploomber 
        coveralls
  
    - run: |
        echo "Integration tests... success! ;-)"

    # Update check run called "integration-fork"
    - uses: actions/github-script@v5
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.rest.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;

          const { data: checks } = await github.rest.checks.listForRef({
            ...context.repo,
            ref
          });

          const check = checks.check_runs.filter(c => c.name === process.env.job);

          const { data: result } = await github.rest.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });

          return result;


  integration-trusted-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:
    - name: Start PostgreSQL
      run: |
        brew services start postgresql
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done

    - name: Create PostgreSQL user
      run: psql --command="CREATE USER postgres PASSWORD 'postgres'" postgres

    - name: Update PostgreSQL permissions
      run: psql --command="ALTER DATABASE postgres OWNER TO postgres" postgres

    - name: Check PostgreSQL authentication
      run: PGPASSWORD=postgres pg_isready --dbname postgres --username postgres

    - name: Branch based PR checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: conda-env
        python-version: ${{ matrix.python-version }}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Install dependencies
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        conda install -y pygraphviz -c conda-forge

        # Test vanilla installation, make sure core modules are importable
        # note: I needed to add "--ignore-installed certifi" because the
        # installation started failing suddenly
        pip install .  --ignore-installed certifi
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'

        # install dev requirements
        pip install .[dev]

        # install IR kernel
        echo "install.packages('IRkernel', repos='http://cran.us.r-project.org'); IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        PLOOMBER_STATS_ENABLED: false
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env
        pytest tests/cli/test_cloud_execution.py

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  integration-fork-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    if: 
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    steps:
    - name: Start PostgreSQL
      run: |
        brew services start postgresql
        echo "Check PostgreSQL service is running"
        i=10
        COMMAND='pg_isready'
        while [ $i -gt 0 ]; do
            echo "Check PostgreSQL service status"
            eval $COMMAND && break
            ((i--))
            if [ $i == 0 ]; then
                echo "PostgreSQL service not ready, all attempts exhausted"
                exit 1
            fi
            echo "PostgreSQL service not ready, wait 10 more sec, attempts left: $i"
            sleep 10
        done

    - name: Create PostgreSQL user
      run: psql --command="CREATE USER postgres PASSWORD 'postgres'" postgres

    - name: Update PostgreSQL permissions
      run: psql --command="ALTER DATABASE postgres OWNER TO postgres" postgres

    - name: Check PostgreSQL authentication
      run: PGPASSWORD=postgres pg_isready --dbname postgres --username postgres

    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: conda-env
        python-version: ${{ matrix.python-version }}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2

    - name: Install dependencies
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        conda install -y pygraphviz -c conda-forge

        # Test vanilla installation, make sure core modules are importable
        # note: I needed to add "--ignore-installed certifi" because the
        # installation started failing suddenly
        pip install .  --ignore-installed certifi
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'

        # install dev requirements
        pip install .[dev]

        # install IR kernel
        echo "install.packages('IRkernel', repos='http://cran.us.r-project.org'); IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        PLOOMBER_STATS_ENABLED: false
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env
        pytest tests/cli/test_cloud_execution.py

    - run: |
        echo "Integration tests... success! ;-)"

    # Update check run called "integration-fork"
    - uses: actions/github-script@v5
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.rest.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;

          const { data: checks } = await github.rest.checks.listForRef({
            ...context.repo,
            ref
          });

          const check = checks.check_runs.filter(c => c.name === process.env.job);

          const { data: result } = await github.rest.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });

          return result;


  integration-trusted-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    steps:

    - name: Start PostgreSQL
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
    - name: Change PostgreSQL password
      run: |
        & $env:PGBIN\psql --command  "ALTER USER postgres PASSWORD 'postgres'"
    - name: Check PostgreSQL authentication
      run: |
        $env:PGPASSWORD = 'postgres'
        & $env:PGBIN\pg_isready --dbname postgres --username postgres

    - name: Branch based PR checkout
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: conda-env
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      shell: bash -l {0}
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        # there's a bug in jupyter, we need to install this first
        conda install pywin32

        # install graphviz (pygraphviz not available in conda for win-64,
        # it will be installed from pip)
        # conda install -y graphviz -c conda-forge
        # note: this installation still gives trouble (error when saving png
        # files but it makes pygraphviz importable), we can get rid of this
        # once we update the tests to mock the @requires decorator to make
        # it think that pygraphviz is installed when it's not. the tests
        # currently do not call pygraphviz (it's mocked), but @requires imports
        conda install -y -c alubbock pygraphviz 
        # seems like pygraphviz just doesnt work on windows
        # https://github.com/pygraphviz/pygraphviz/issues/40
        # pip install pygraphviz

        # Test vanilla installation, make sure core modules are importable
        pip install .
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'

        # install dev requirements
        pip install .[dev]

        # https://github.com/ipython/ipython/issues/12049
        pip install prompt-toolkit==2.0.10

        # install R and IR kernel
        conda install -y r-base r-irkernel -c conda-forge
        echo "IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        PLOOMBER_STATS_ENABLED: false
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
      shell: bash -l {0}
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env
        pytest tests/cli/test_cloud_execution.py

  # Repo owner has commented /ok-to-test on a (fork-based) pull request
  integration-fork-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    if: 
      github.event_name == 'repository_dispatch' &&
      github.event.client_payload.slash_command.sha != '' &&
      contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.sha)
    steps:

    # Check out merge commit
    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    - name: Start PostgreSQL
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
    - name: Change PostgreSQL password
      run: |
        & $env:PGBIN\psql --command  "ALTER USER postgres PASSWORD 'postgres'"
    - name: Check PostgreSQL authentication
      run: |
        $env:PGPASSWORD = 'postgres'
        & $env:PGBIN\pg_isready --dbname postgres --username postgres

    - name: Set up Python ${{ matrix.python-version }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        activate-environment: conda-env
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      shell: bash -l {0}
      run: |

        eval "$(conda shell.bash hook)"
        conda activate conda-env

        # make the build fail quickly on flake8 errors
        pip install flake8
        flake8

        # there's a bug in jupyter, we need to install this first
        conda install pywin32

        # install graphviz (pygraphviz not available in conda for win-64,
        # it will be installed from pip)
        # conda install -y graphviz -c conda-forge
        # note: this installation still gives trouble (error when saving png
        # files but it makes pygraphviz importable), we can get rid of this
        # once we update the tests to mock the @requires decorator to make
        # it think that pygraphviz is installed when it's not. the tests
        # currently do not call pygraphviz (it's mocked), but @requires imports
        conda install -y -c alubbock pygraphviz 
        # seems like pygraphviz just doesnt work on windows
        # https://github.com/pygraphviz/pygraphviz/issues/40
        # pip install pygraphviz

        # Test vanilla installation, make sure core modules are importable
        pip install .
        python -c 'import ploomber'
        python -c 'import ploomber.tasks'
        python -c 'import ploomber.products'
        python -c 'import ploomber.clients'

        # install dev requirements
        pip install .[dev]

        # https://github.com/ipython/ipython/issues/12049
        pip install prompt-toolkit==2.0.10

        # install R and IR kernel
        conda install -y r-base r-irkernel -c conda-forge
        echo "IRkernel::installspec()" | Rscript -

        # install sample package for tests
        pip install --editable tests/assets/test_pkg

    - name: Run tests
      env:
        PLOOMBER_STATS_ENABLED: false
        PLOOMBER_CLOUD_KEY: ${{ secrets.PLOOMBER_CLOUD_KEY }}
      shell: bash -l {0}
      run: |
        eval "$(conda shell.bash hook)"
        conda activate conda-env
        pytest tests/cli/test_cloud_execution.py

    - run: |
        echo "Integration tests... success! ;-)"

    # Update check run called "integration-fork"
    - uses: actions/github-script@v5
      id: update-check-run
      if: ${{ always() }}
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
        job: ${{ github.job }}
        # Conveniently, job.status maps to https://developer.github.com/v3/checks/runs/#update-a-check-run
        conclusion: ${{ job.status }} 
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.rest.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          const ref = pull.head.sha;

          const { data: checks } = await github.rest.checks.listForRef({
            ...context.repo,
            ref
          });

          const check = checks.check_runs.filter(c => c.name === process.env.job);

          const { data: result } = await github.rest.checks.update({
            ...context.repo,
            check_run_id: check[0].id,
            status: 'completed',
            conclusion: process.env.conclusion
          });

          return result;